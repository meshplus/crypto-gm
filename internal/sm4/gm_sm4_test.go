package sm4

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

//Test case from GM/T 0002-2012
func TestEncryptBlock(t *testing.T) {
	type args struct {
		key []byte
		dst []byte
		src []byte
	}
	tests1 := []struct {
		name string
		args args
	}{
		{"sm4Test1", args{[]byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10}, []byte{0x68, 0x1E, 0xDF, 0x34, 0xD2, 0x06, 0x96, 0x5E, 0x86, 0xB3, 0xE9, 0x4F, 0x53, 0x6E, 0x42, 0x46}, []byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10}}},
	}
	for _, tt := range tests1 {
		t.Run(tt.name, func(t *testing.T) {
			dst := make([]byte, 16)
			EncryptBlock(tt.args.key, dst, tt.args.src)
			assert.Equal(t, tt.args.dst, dst)
		})
	}

	tests2 := []struct {
		name string
		args args
	}{
		{"sm4Test1", args{[]byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10}, []byte{0x59, 0x52, 0x98, 0xC7, 0xC6, 0xFD, 0x27, 0x1F, 0x4, 0x02, 0xF8, 0x04, 0xC3, 0x3D, 0x3F, 0x66}, []byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10}}},
	}
	for _, tt := range tests2 {
		t.Run(tt.name, func(t *testing.T) {
			dst := make([]byte, 16)
			src := make([]byte, 16)
			copy(src, tt.args.src)
			for i := 0; i < 1000000; i++ {
				EncryptBlock(tt.args.key, dst, src)
				copy(src, dst)
			}
			assert.Equal(t, tt.args.dst, dst)
		})
	}
}
